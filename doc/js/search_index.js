var search_data = {"index":{"searchIndex":["cell","engine","game","grid","gtk","stock","object","changecellstate()","changestate()","evalindices()","gennewgrid()","genpicturegrid()","genrandomgrid()","getlength()","getstate()","getvalue()","new()","new()","new()","new()","picture()","random()","right?()","setvalue()","start()","to_s()","readme","created.rid"],"longSearchIndex":["cell","engine","game","grid","gtk","gtk::stock","object","grid#changecellstate()","cell#changestate()","grid#evalindices()","engine#gennewgrid()","engine#genpicturegrid()","engine#genrandomgrid()","grid#getlength()","cell#getstate()","cell#getvalue()","cell::new()","engine::new()","game::new()","grid::new()","grid#picture()","grid#random()","cell#right?()","cell#setvalue()","game#start()","cell#to_s()","",""],"info":[["Cell","","Cell.html","","<p>This class represents a <code>Cell</code>\n"],["Engine","","Engine.html","","<p>This class represents the <code>Controller</code> from <code>MVC</code>\n"],["Game","","Game.html","","<p>This class represents the complete <code>Game</code>\n"],["Grid","","Grid.html","","<p>This class represents a <code>Grid</code>\n"],["Gtk","","Gtk.html","",""],["Gtk::Stock","","Gtk/Stock.html","",""],["Object","","Object.html","",""],["changeCellState","Grid","Grid.html#method-i-changeCellState","(x, y)","<p>Turns to false a true cell state and to true a false cell state\n"],["changeState","Cell","Cell.html#method-i-changeState","()","<p>Boolean access method\n"],["evalIndices","Grid","Grid.html#method-i-evalIndices","()","<p>Fills +@xIndices+ and +@yIndices+ with right values\n"],["genNewGrid","Engine","Engine.html#method-i-genNewGrid","(x = 10)","<p>Generates a x * x grid of <code>Cell</code> with false value/state\n"],["genPictureGrid","Engine","Engine.html#method-i-genPictureGrid","(path)","<p>Fills the current grid with picture&#39;s values\n"],["genRandomGrid","Engine","Engine.html#method-i-genRandomGrid","()","<p>Fills the current grid with random value\n"],["getLength","Grid","Grid.html#method-i-getLength","()","<p>Returns the @maxLen if needed\n"],["getState","Cell","Cell.html#method-i-getState","()","<p>Access method\n"],["getValue","Cell","Cell.html#method-i-getValue","()","<p>Access method\n"],["new","Cell","Cell.html#method-c-new","(state, value)","<p>Initializes the +@state+ and +@value+ with parameters\n"],["new","Engine","Engine.html#method-c-new","(x = 10)","<p>Initiates the needed instance&#39;s variables\n"],["new","Game","Game.html#method-c-new","()","<p>Creates a new instance of the game\n"],["new","Grid","Grid.html#method-c-new","(x = 10)","<p>Initializes +@grid+, +@xIndices+ and +@yIndices+ with 2D Array\n"],["picture","Grid","Grid.html#method-i-picture","()","<p>TODO : Generates a grid from a picture\n"],["random","Grid","Grid.html#method-i-random","()","<p>Generates “randomly” the value of each grid&#39;s cell\n"],["right?","Cell","Cell.html#method-i-right-3F","()","<p>Verifies if +@state+ and +@value+ are the same\n"],["setValue","Cell","Cell.html#method-i-setValue","(value)","<p>Access method\n"],["start","Game","Game.html#method-i-start","()","<p>Starts the engine\n"],["to_s","Cell","Cell.html#method-i-to_s","()","<p>Makes the <code>Cell</code> object printable\n"],["README","","README_md.html","","<p>Projet-Luthor\n"],["created.rid","","doc/created_rid.html","",""]]}}